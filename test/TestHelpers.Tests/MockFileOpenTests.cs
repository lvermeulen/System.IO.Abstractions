using System.Collections.Generic;
using System.IO.Abstractions.TestingHelpers;
using Xunit;

namespace System.IO.Abstractions.TestHelpers.Tests
{
    using XFS = MockUnixSupport;

    public class MockFileOpenTests {
        [Fact]
        public void MockFile_Open_ThrowsOnCreateNewWithExistingFile()
        {
            string filepath = XFS.Path(@"c:\something\already\exists.txt");
            MockFileSystem filesystem = new MockFileSystem(new Dictionary<string, MockFileData> 
            {
                { filepath, new MockFileData("I'm here") }
            });

            Assert.Throws<IOException>(() => filesystem.File.Open(filepath, FileMode.CreateNew));
        }

        [Fact]
        public void MockFile_Open_ThrowsOnOpenWithMissingFile()
        {
            string filepath = XFS.Path(@"c:\something\doesnt\exist.txt");
            MockFileSystem filesystem = new MockFileSystem(new Dictionary<string, MockFileData>());

            Assert.Throws<FileNotFoundException>(() => filesystem.File.Open(filepath, FileMode.Open));
        }

        [Fact]
        public void MockFile_Open_ThrowsOnTruncateWithMissingFile()
        {
            string filepath = XFS.Path(@"c:\something\doesnt\exist.txt");
            MockFileSystem filesystem = new MockFileSystem(new Dictionary<string, MockFileData>());

            Assert.Throws<FileNotFoundException>(() => filesystem.File.Open(filepath, FileMode.Truncate));
        }

        [Fact]
        public void MockFile_Open_CreatesNewFileFileOnCreate()
        {
            string filepath = XFS.Path(@"c:\something\doesnt\exist.txt");
            MockFileSystem filesystem = new MockFileSystem(new Dictionary<string, MockFileData>());

            Stream stream = filesystem.File.Open(filepath, FileMode.Create);

            Assert.True(filesystem.File.Exists(filepath));
            Assert.Equal(stream.Position, 0);
            Assert.Equal(stream.Length, 0);
        }

        [Fact]
        public void MockFile_Open_CreatesNewFileFileOnCreateNew()
        {
            string filepath = XFS.Path(@"c:\something\doesnt\exist.txt");
            MockFileSystem filesystem = new MockFileSystem(new Dictionary<string, MockFileData>());

            Stream stream = filesystem.File.Open(filepath, FileMode.CreateNew);

            Assert.True(filesystem.File.Exists(filepath));
            Assert.Equal(stream.Position, 0);
            Assert.Equal(stream.Length, 0);
        }

        [Fact]
        public void MockFile_Open_OpensExistingFileOnAppend()
        {
            string filepath = XFS.Path(@"c:\something\does\exist.txt");
            MockFileSystem filesystem = new MockFileSystem(new Dictionary<string, MockFileData>
            {
                { filepath, new MockFileData("I'm here") }
            });

            Stream stream = filesystem.File.Open(filepath, FileMode.Append);
            MockFileData file = filesystem.GetFile(filepath);
            
            Assert.Equal(stream.Position, file.Contents.Length);
            Assert.Equal(stream.Length, file.Contents.Length);

            stream.Seek(0, SeekOrigin.Begin);

            byte[] data;
            using (BinaryReader br = new BinaryReader(stream))
            {
                data = br.ReadBytes((int)stream.Length);
            }

            Assert.Equal(file.Contents, data);
        }

        [Fact]
        public void MockFile_Open_OpensExistingFileOnTruncate()
        {
            string filepath = XFS.Path(@"c:\something\does\exist.txt");
            MockFileSystem filesystem = new MockFileSystem(new Dictionary<string, MockFileData>
            {
                { filepath, new MockFileData("I'm here") }
            });

            Stream stream = filesystem.File.Open(filepath, FileMode.Truncate);
            MockFileData file = filesystem.GetFile(filepath);

            Assert.Equal(stream.Position, 0);
            Assert.Equal(stream.Length, 0);
            Assert.Equal(file.Contents.Length, 0);
        }

        [Fact]
        public void MockFile_Open_OpensExistingFileOnOpen()
        {
            string filepath = XFS.Path(@"c:\something\does\exist.txt");
            MockFileSystem filesystem = new MockFileSystem(new Dictionary<string, MockFileData>
            {
                { filepath, new MockFileData("I'm here") }
            });

            Stream stream = filesystem.File.Open(filepath, FileMode.Open);
            MockFileData file = filesystem.GetFile(filepath);

            Assert.Equal(stream.Position, 0);
            Assert.Equal(stream.Length, file.Contents.Length);

            byte[] data;
            using (BinaryReader br = new BinaryReader(stream))
            {
                data = br.ReadBytes((int)stream.Length);
            }

            Assert.Equal(file.Contents, data);
        }

        [Fact]
        public void MockFile_Open_OpensExistingFileOnOpenOrCreate()
        {
            string filepath = XFS.Path(@"c:\something\does\exist.txt");
            MockFileSystem filesystem = new MockFileSystem(new Dictionary<string, MockFileData>
            {
                { filepath, new MockFileData("I'm here") }
            });

            Stream stream = filesystem.File.Open(filepath, FileMode.OpenOrCreate);
            MockFileData file = filesystem.GetFile(filepath);

            Assert.Equal(stream.Position, 0);
            Assert.Equal(stream.Length, file.Contents.Length);

            byte[] data;
            using (BinaryReader br = new BinaryReader(stream))
            {
                data = br.ReadBytes((int)stream.Length);
            }

            Assert.Equal(file.Contents, data);
        }

        [Fact]
        public void MockFile_Open_CreatesNewFileOnOpenOrCreate()
        {
            string filepath = XFS.Path(@"c:\something\doesnt\exist.txt");
            MockFileSystem filesystem = new MockFileSystem(new Dictionary<string, MockFileData>());

            Stream stream = filesystem.File.Open(filepath, FileMode.OpenOrCreate);

            Assert.True(filesystem.File.Exists(filepath));
            Assert.Equal(stream.Position, 0);
            Assert.Equal(stream.Length, 0);
        }

        [Fact]
        public void MockFile_Open_OverwritesExistingFileOnCreate()
        {
            string filepath = XFS.Path(@"c:\something\doesnt\exist.txt");
            MockFileSystem filesystem = new MockFileSystem(new Dictionary<string, MockFileData>
            {
                { filepath, new MockFileData("I'm here") }
            });

            Stream stream = filesystem.File.Open(filepath, FileMode.Create);
            MockFileData file = filesystem.GetFile(filepath);

            Assert.Equal(stream.Position, 0);
            Assert.Equal(stream.Length, 0);
            Assert.Equal(file.Contents.Length, 0);
        }

        [Fact]
        public void MockFile_OpenText_ShouldRetainLastWriteTime()
        {
            // Arrange
            MockFileSystem fs = new MockFileSystem();
            string filepath = XFS.Path(@"C:\TestData\test.txt");
            MockFileData file = new MockFileData(@"I'm here");
            DateTime lastWriteTime = new DateTime(2012, 03, 21);
            file.LastWriteTime = lastWriteTime;
            fs.AddFile(filepath, file);

            // Act
            using (StreamReader reader = fs.File.OpenText(filepath))
            {
                reader.ReadLine();
            }

            // Assert
            Assert.Equal(lastWriteTime, fs.FileInfo.FromFileName(filepath).LastWriteTime);
        }

        [Fact]
        public void MockFile_OpenText_ShouldRetainLastAccessTime()
        {
            // Arrange
            MockFileSystem fs = new MockFileSystem();
            string filepath = XFS.Path(@"C:\TestData\test.txt");
            MockFileData file = new MockFileData(@"I'm here");
            DateTime lastAccessTime = new DateTime(2012, 03, 21);
            file.LastAccessTime = lastAccessTime;
            fs.AddFile(filepath, file);

            // Act
            using (StreamReader reader = fs.File.OpenText(filepath))
            {
                reader.ReadLine();
            }

            // Assert
            Assert.Equal(lastAccessTime, fs.FileInfo.FromFileName(filepath).LastAccessTime);
        }

        [Fact]
        public void MockFile_OpenText_ShouldRetainCreationTime()
        {
            // Arrange
            MockFileSystem fs = new MockFileSystem();
            string filepath = XFS.Path(@"C:\TestData\test.txt");
            MockFileData file = new MockFileData(@"I'm here");
            DateTime creationTime = new DateTime(2012, 03, 21);
            file.CreationTime = creationTime;
            fs.AddFile(filepath, file);

            // Act
            using (StreamReader reader = fs.File.OpenText(filepath))
            {
                reader.ReadLine();
            }

            // Assert
            Assert.Equal(creationTime, fs.FileInfo.FromFileName(filepath).CreationTime);
        }
    }
}